**COMANDOS

ng g c componentName 				-> Genera un componente
ng g c componentName -is 			-> Genera un componente sin el estilo
ng g c componentName --specf=false		-> Genera un componente sin el archivo de pruebas
ng g c componentName --flat			-> No crea una carpeta para el nuevo componente


************************************************  GET <input/> value ************************************************
 - El #buscarTexto es un identificador del input.
 - (keyup.enter)="buscarHeroe(buscarTexto.value)" llama a un método del ts y le envia el valor del input.
<input class="form-control mr-sm-2" type="text" placeholder="Buscar" (keyup.enter)="buscarHeroe(buscarTexto.value)" #buscarTexto>


************************************************ Send parms with this.router.navigate ************************************************

HTML: <button (click)="verHeroe(i)">


import { Router } from '@angular/router';
TS send: 
  verHeroe(i: number) {
    this.router.navigate(['/heroe', i]);
  }


import { ActivatedRoute } from '@angular/router';
TS receive:
  constructor(private _actRouter: ActivatedRoute, private _heroService: HeroesService) {
    this._actRouter.params.subscribe(params => {
      this.hero = this._heroService.getHero(params['id']);
    });
  }



************************************************ @Input ************************************************
@Input utilizado para pasar información de un componente padre a un hijo.

@Input() variableName: string; significa que ese elemento se puede inicializar dentro del mismo componente o puede ser enviado desde otro componente
solamente añadiendo en el HTML dentro del tag lo siguiente: 

<app-card [variableName]="EsteValorVaALlegarAlInput"></app-card>

************************************************ @0utput ************************************************
@Output utilizado para pasar información de un componente hijo al padre.

++ Desde el componente HIJO:

@Output() heroSelected: EventEmitter<number>;

constructor(private router: Router) {
  this.heroSelected = new EventEmitter;
}

<button (click)="verHeroe()">

verHeroe() {
  this.heroSelected.emit(this.indice);
}

++ Desde el componente PADRE:

<app-card (heroSelected)="verHeroe($event)">
donde el $event es el valor emitido desde el hijo cuando ejecuta el metodo: this.heroSelected.emit(this.indice);

************************************************ SERVICES - providedIn: root ************************************************
De angular 6 y superior, no es necesario importar los servicios en el los providers del appComponent.
Desde el servicio solo hay que configurar:

@Injectables({
    providedIn: 'root'
})

************************************************ ROUTES ************************************************
new new <name> --routing=true



************************************************ __________ ************************************************

************************************************ __________ ************************************************